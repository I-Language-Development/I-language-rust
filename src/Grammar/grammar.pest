// I Language pest grammar.
// Version: 0.1.0

// Copyright (c) 2023-present I Language Development.

// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the 'Software'),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

// ASCII_ALPHA All chars, big and small
// ASCII_DIGIT All digits
// NEWLINE All newline chars

import = { ("from" ~ indentifier)? ~ "import" ~ indentifier ~ ("as" ~ indentifier)? ~ NEWLINE }
assignment = { indentifier ~ "=" ~ (expression | indentifier) }

keywords = { "as" | "break" | "case" | "catch" | "class" | "const" | "continue" | "default" | "delete" | "else" | "elseif" | "finally" | "for" | "from" | "func" | "function" | "if" | "import" | "match" | "not" | "raise" | "return" | "try" | "use" | "var" | "while" }
build_in_types = { "array" | "bool" | "char" | "dict" | "dictionary" | "float" | "int" | "integer" | "str" | "string" | "tuple" }

indentifier = @{ ( ASCII_ALPHA | "_" ) ~ ( ASCII_ALPHA | ASCII_DIGIT)+ }
expression = { "a" }


//////////////
// COMMENTS //
//////////////

comments = _{ "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }
multiline_comments = _{ "/*" ~ ANY* ~ "*/" }


////////////////
// WHITESPACE //
////////////////

WHITESPACE = _{ " " }


file = { SOI ~ ( ( import | assignment ) ~ NEWLINE )* ~ EOI }
